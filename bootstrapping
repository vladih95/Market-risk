import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os


### General steps


## import data from excel

# set path to excel file
path=r"C:\Users\..."

# set pame of excel file
file="file.xlsx"

# read excel file
data=pd.read_excel(path+os.sep+file)

# delete path and file name to free up memory
del path,file


## create a table out of imported data to make data easier accessible
data=pd.DataFrame({"Date":data["Dates"], "Gold":data["Gold USD/Oz"],\
                   "10 yr. Bond":data["Bond Price, T=10 years, N=1000 USD"],\
                    "30 yr. Bond":data["Bond Price, T=30 years, N=1000 USD"]})  
    
## calculate loss of portfolio

#calculate loss of gold
loss_gold=(data["Gold"]-data["Gold"].shift(periods=1))*-1

# drop na of first period (na because nothing to subtract from)
loss_gold=loss_gold.dropna()

#calculate loss of bond T=10
loss_bonds_T10=(data["10 yr. Bond"]-data["10 yr. Bond"].shift(periods=1))*-1

# drop na of first period (na because nothing to subtract from)
loss_bonds_T10=loss_bonds_T10.dropna()



# ask how many units of gold user possesses
x=int(input("how many units of gold do you currently possess: \n"))

# ask how many units of bond user possesses
y=int(input("how many units of 10 yr. bonds do you currently possess: \n"))

# portfolio loss with 2 units of gold and 3 units of bonds
loss=x*loss_gold+y*loss_bonds_T10

# print out loss so user can double check
print("the losses per period: ")
print (loss)

# delete loss bonds, loss gold and general table to free up memory
del loss_bonds_T10,loss_gold,data,x,y



### task 1 -> Bootstrapping


## define subsample size and amount of subsamples

# define samplesize
m=int(input("how big should each subsample be?: \n"))

# define amount of samples
n=int(input("how many subsamples would you like to calculate? \n"))



## find subsampling function and loop through it

# create an empty array to store random values later on
s=np.zeros([n+1,m+1])

# create a loop to acess each subsample (each row);
# n+ 1 as last value in range is not considered
for j in range(n+1):
# select random number from loss function
# with size m+1 for each subsample (each row)
    s[j]=np.random.choice(loss,size=(m+1))
    
# print values of subsamples 
print("The values of your randomly generated subsamples: ")
print (s)

#delete running variable to free up memory
del j

## compute var

# get 95% quantile for each subsample 
# -> 95% VaR for each subsample
s_quant=np.quantile(s,0.95,axis =1)

#delete matrix with all values of subsamples
del s

# create distribution function of 95% VaR
s_var_fun=plt.hist(s_quant, density=True)

# calculate average VaR of subsamples-> calculate VaR
s_avg=s_quant.mean()

# calculate upper bound of confidence interval
s_upper=np.quantile(s_quant,0.95)

# calculate lower bound of confidence interval
s_lower=np.quantile(s_quant,0.05)

# delete array of different quantiles to free up memory
del s_quant
